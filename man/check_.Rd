% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/checkers.R
\name{check_}
\alias{check_}
\title{Use a Series of \code{check_...} Functions}
\usage{
check_(x, ..., .fmt = "check_\%s")
}
\arguments{
\item{x}{the to-be-checked object}

\item{...}{a series of \code{check_...} suffixes, either quoted or unquoted}

\item{.fmt}{a format string for \code{\link[=sprintf]{sprintf()}}: only use if e.g. defined all
your check functions as \code{test_...} instead of \code{check_...}.}
}
\value{
if all the checks pass, the value \code{x}
}
\description{
Provides a more compact syntax for applying \code{check_...}s
}
\examples{
# define some check functions:
check_character <- checker(is.character(x), "`\%s` is not class 'character'.")
check_scalar <- checker(length(x) == 1, "`\%s` must be length == 1.")
check_nonemptychar <- checker(all(nchar(x) > 0), "`\%s` must be non-empty.")

# define a function that wants argument checking, and use check functions:
helloworld <- function(name) {
  name |> check_(character, scalar, nonemptychar) |>
    sprintf(fmt = "Hello, \%s!")
}

# note the more compact syntax compared to [checker()]:
helloworld

# works:
helloworld("Carl")

# doesn't:
try(helloworld(1)) # error from check_character
try(helloworld(c("Alice", "Bob"))) # error from check_scalar
try(helloworld("")) # error from check_nonemptychar
}
